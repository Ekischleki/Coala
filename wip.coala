collection bool {
    sub and(bool: a, bool: b) {} = not bool::nand(a, b)
    sub nand(bool: a, bool: b) {} = or(not a, not b)
    sub nor(bool: a, bool: b) {} = not or(a, b)
    sub xor(bool: a, bool: b) {
        let not_both_true = bool::nand(a, b)
        let either_true = or(a, b)
    } = bool::and(not_both_true, either_true)
    sub xnor(bool: a, bool: b) {
        let both_true = bool::and(a, b)
        let both_false = bool::nor(a, b)
    } = or(both_true, both_false)
    sub eq(bool: a, bool: b) {} = bool::xnor(a, b)
}
collection bit {
    sub half_adder(bool: a, bool: b) {
        let carry = bool::and(a, b)
        let data = bool::xor(a, b)
    } = ArithmeticResult {
            data: data, 
            carry: carry
        }
}
collection assert {
    sub eq(bool: a, bool: b) {
        force bool::eq(a, b) => true
    }
    sub neq(bool: a, bool: b) {
        force bool::eq(a, b) => false
    }
    sub is_true(bool: a) {
        force a => true
    }
    sub is_false(bool: a) {
        force a => false
    }
}

#composite ArithmeticResult {
#    bool: data,
#    bool: carry
#}

problem {
    #sub test(ArithmeticResult: arithmetic_result) { 
    #    force arithmetic_result.data => true
    #    force arithmetic_result.carry => false
    #}
    sub test(bool: a, bool: b) {
        #let res = bit::half_adder(a, b)
        force or (a, b) => false
    }
}


solution {
    test(true, true)
}


